''' This module facilitates continuous data logging on the host PC using a ZMQ
    protocol on localhost.
'''
import zmq
import json
from threading import Thread
import time
from artiq.experiment import TBool


class KernelComm:
    ''' Handles live attribute updates and data broadcasting '''
    def __init__(self, control_addr, broadcast_addr):
        self.is_online = True

        self.control_socket = zmq.Context().socket(zmq.PAIR)
        self.control_socket.RCVTIMEO = 0
        self.control_socket.connect("tcp://{}".format(control_addr))

        self.broadcast_socket = zmq.Context().socket(zmq.PUB)
        self.broadcast_socket.bind("tcp://{}".format(broadcast_addr))

    def update_parameters(self, experiment):
        params = self.receive()
        for key, value in params.items():
            setattr(experiment, key, value)
            if key == 'online':
                self.is_online = value

    def receive(self):
        try:
            cmd = self.control_socket.recv_json()
        except zmq.Again:
            cmd = {}
        return cmd

    def send(self, data):
        ''' Send json-formatted data over the broadcast socket '''
        self.broadcast_socket.send_json(data)

    def cycle(self, experiment, data) -> TBool:
        ''' Update parameters received from the controller, send new data,
            and return a bool indicating whether to keep running the experiment. '''
        self.update_parameters(experiment)
        self.send(data)
        return self.is_online

class PcComm:
    ''' Handles live updating of parameters from the GUI and subscribes to the
        data feed generated by the experiment.
    '''
    def __init__(self, control_addr, subscribe_addr, delay=0.1):
        self.delay = delay

        self.subscribe_context = zmq.Context()
        self.subscribe_socket = self.subscribe_context.socket(zmq.SUB)
        self.subscribe_socket.setsockopt_string(zmq.SUBSCRIBE, '')
        self.subscribe_socket.connect("tcp://{}".format(subscribe_addr))

        self.control_socket = zmq.Context().socket(zmq.PAIR)
        self.control_socket.bind("tcp://{}".format(control_addr))

    def send(self, d):
        self.control_socket.send_json(d)

    def subscribe(self):
        Thread(target=self.subscribe_thread).start()

    def subscribe_thread(self):
        self.online = True
        while self.online:
            try:
                data = self.subscribe_socket.recv_json()
                print(data)

            except:
                print('Listener terminating.')
                break
            time.sleep(self.delay)

    def stop(self):
        self.send({'online': False})
        self.online = False
        self.subscribe_socket.close()
        self.subscribe_context.destroy()
